// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  username     String    @unique
  birthday     DateTime?
  gender       String?
  phoneNumber  String?   @unique
  instagramUrl String?
  xUrl         String?
  imgUrl       String?
  bio          String?
  cpf          String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  lastLogin    DateTime?
  isActive     Boolean   @default(true)

  companies     UserCompany[]
  notifications Notification[]
  RefreshToken  RefreshToken[]
}

model Company {
  id           String   @id @default(cuid())
  name         String
  cnpj         String   @unique
  instagramUrl String?
  xUrl         String?
  websiteUrl   String?
  industry     String?
  location     String?
  imgUrl       String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  isActive     Boolean  @default(true)

  collaborators UserCompany[]

  posts               Post[]
  engagements         Engagement[]
  sentimentsByNetwork SentimentByNetwork[]
  sentimentsByPost    SentimentByPost[]
  sentimentTrends     SentimentTrend[]
}

model UserCompany {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  isAdmin   Boolean @default(false)

  @@unique([userId, companyId])
}

model Post {
  id              String   @id @default(cuid())
  postId          String   @unique
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  network         String
  postUrl         String?  @unique
  content         String?
  createdAt       DateTime @default(now())
  engagementScore Int?
  sentimentScore  Int?
  isActive        Boolean  @default(true)

  audienceByNetwork AudienceByNetwork[]
  engagements       Engagement[]
  sentimentsByPost  SentimentByPost[]
  Comment           Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  commentId String   @unique
  content   String
  createdAt DateTime @default(now())
}

model Engagement {
  id                    String   @id @default(cuid())
  company               Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId             String
  post                  Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId                String
  improvementPercentage Int?
  totalReactions        Int?
  period                String?
  createdAt             DateTime @default(now())
}

model AudienceByNetwork {
  id               String   @id @default(cuid())
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId           String
  network          String
  averageReactions Int?
  reach            Int?
  impressions      Int?
  createdAt        DateTime @default(now())
}

model SentimentByNetwork {
  id            String   @id @default(cuid())
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  network       String
  positive      Int?
  negative      Int?
  neutral       Int?
  totalMentions Int?
  createdAt     DateTime @default(now())
}

model SentimentByPost {
  id            String   @id @default(cuid())
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  network       String
  positive      Int?
  negative      Int?
  neutral       Int?
  totalComments Int?
  createdAt     DateTime @default(now())
  Company       Company  @relation(fields: [companyId], references: [id])
  companyId     String
}

model SentimentTrend {
  id         String   @id @default(cuid())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String
  date       DateTime
  network    String
  positive   Int?
  negative   Int?
  neutral    Int?
  trendScore Int?
  createdAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model RefreshToken {
  id           String    @id @default(cuid())
  userId       String
  email        String
  refreshToken String
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  revoked      Boolean   @default(false)
  ipAddress    String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id])
}
